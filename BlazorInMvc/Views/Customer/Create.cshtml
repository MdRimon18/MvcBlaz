@using Domain.Entity.Settings
@model Customers
 
 
    <div class="container mt-4">
        <div class="card mb-3">
            <div class="card-header">
                <h5 class="mb-0">
                    <a class="btn btn-outline-secondary btn-sm me-2" href="#"><i class="fas fa-arrow-left"></i></a>
                    Customer Profile Entry
                </h5>
            </div>
            <form id="customerForm" enctype="multipart/form-data" class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="CustomerName" class="form-label fw-semibold">Enter Name<span class="error-star">*</span></label>
                            <input id="CustomerName" name="CustomerName" class="form-control form-control-sm form-rounded" placeholder="Enter Name" >
                        </div>
                        <div class="mb-3">
                            <label for="MobileNo" class="form-label fw-semibold">Mobile Number<span class="error-star">*</span></label>
                            <input id="MobileNo" name="MobileNo"   class="form-control form-control-sm form-rounded" placeholder="Enter Mobile Number"  >
  
                        </div>
                        <div class="mb-3">
                            <label for="Email" class="form-label fw-semibold">Email</label>
                            <input id="Email" name="Email" type="email" class="form-control form-control-sm form-rounded" placeholder="Write Email">
                        </div>
                        <div class="mb-3">
                            <label for="CountryId" class="form-label fw-semibold">Select Country<span class="error-star">*</span></label>
                            <select id="CountryId" name="CountryId" class="form-select form-control-sm form-rounded" >
                                <option value="">Select Country</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6 class="mb-3">Upload Image</h6>
                        <div class="mb-3">
                            <img id="imagePreview" src="" alt="Image Preview" class="rounded-circle" style="width: 160px; height: 160px; object-fit: cover; display: none;">
                        </div>
                        <input type="file" name="imageFile" id="fileInput" class="form-control form-control-sm form-rounded" accept="image/*">
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="StateName" class="form-label fw-semibold">State Name</label>
                            <input id="StateName" name="StateName" class="form-control form-control-sm form-rounded" placeholder="Enter Your State Name">
                        </div>
                        <div class="mb-3">
                            <label for="Occupation" class="form-label fw-semibold">Occupation</label>
                            <input id="Occupation" name="Occupation" class="form-control form-control-sm form-rounded" placeholder="Occupation">
                        </div>
                        <div class="mb-3">
                            <label for="OfficeName" class="form-label fw-semibold">Office Name</label>
                            <input id="OfficeName" name="OfficeName" class="form-control form-control-sm form-rounded" placeholder="Office Name">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="CustAddrssOne" class="form-label fw-semibold">Address One</label>
                            <textarea id="CustAddrssOne" name="CustAddrssOne" rows="3" class="form-control form-control-sm form-rounded" placeholder="Customer Address One"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="CustAddrssTwo" class="form-label fw-semibold">Address Two</label>
                            <textarea id="CustAddrssTwo" name="CustAddrssTwo" rows="3" class="form-control form-control-sm form-rounded" placeholder="Customer Address Two"></textarea>
                        </div>
                    </div>
                </div>
                <input id="CustomerId" name="CustomerId" type="hidden" value="0">
                <div class="d-flex justify-content-end mt-3">
                <button type="button" class="btn btn-primary btn-sm me-2" id="saveBtn">Save</button>
                    <button type="reset" class="btn btn-secondary btn-sm" id="resetBtn">Refresh</button>
                </div>
            </form>
        </div>
    </div>
  
    <script>
        window.initCustomerForm = async function () {
            //alert(22);
            const saveBtn = document.getElementById('saveBtn');
            const form = document.getElementById('customerForm');
            const fileInput = document.getElementById('fileInput');
            const imagePreview = document.getElementById('imagePreview');
            const customerIdInput = document.getElementById('CustomerId');

            if (fileInput && imagePreview) {
                fileInput.addEventListener('change', function () {
                    const file = fileInput.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            imagePreview.src = e.target.result;
                            imagePreview.style.display = 'block';
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }

            if (saveBtn) {
                saveBtn.addEventListener('click', async function () {
                    $(".form-control").removeClass("is-invalid");
                    $(".invalid-feedback").remove();

                    const customerId = parseInt($("#CustomerId").val()) || 0;
                    const customer = {
                        CustomerId: customerId,
                        CustomerName: $("#CustomerName").val().trim(),
                        MobileNo: $("#MobileNo").val().trim(),
                        Email: $("#Email").val().trim(),
                        CountryId: $("#CountryId").val(),
                        StateName: $("#StateName").val().trim(),
                        Occupation: $("#Occupation").val().trim(),
                        OfficeName: $("#OfficeName").val().trim(),
                        CustAddrssOne: $("#CustAddrssOne").val().trim(),
                        CustAddrssTwo: $("#CustAddrssTwo").val().trim(),
                        CustImgLink: $("#ExistingCustImgLink").val()
                    };

                    let isValid = true;

                    if (!customer.CustomerName) {
                        isValid = false;
                        $("#CustomerName").addClass("is-invalid").after('<div class="invalid-feedback">Name is required.</div>');
                    }
                    if (!customer.MobileNo) {
                        isValid = false;
                        $("#MobileNo").addClass("is-invalid").after('<div class="invalid-feedback">Mobile number is required.</div>');
                    }
                    if (!customer.CountryId) {
                        isValid = false;
                        $("#CountryId").addClass("is-invalid").after('<div class="invalid-feedback">Please select a country.</div>');
                    }
                    if (customer.Email && !/^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/.test(customer.Email)) {
                        isValid = false;
                        $("#Email").addClass("is-invalid").after('<div class="invalid-feedback">Invalid email format.</div>');
                    }
                    if (!isValid) return;

                    const formData = new FormData();
                    for (const key in customer) {
                        formData.append(key, customer[key]);
                    }
                    if (fileInput && fileInput.files.length > 0) {
                        formData.append("imageFile", fileInput.files[0]);
                    }

                    try {
                        const response = await fetch('/api/Customer/SaveCustomer', {
                            method: 'POST',
                            body: formData
                        });

                        if (response.ok) {
                            if (response.status === 201) {
                                const result = await response.json();
                                alert('Customer created successfully with ID: ' + result.customerId);
                                customerIdInput.value = result.customerId;
                            } else if (response.status === 204) {
                                alert('Customer updated successfully');
                            }
                        } else {
                            const error = await response.text();
                            alert('Server error: ' + error);
                        }
                    } catch (error) {
                        alert('Request failed: ' + error.message);
                    }
                });
            }

            const resetBtn = document.getElementById('resetBtn');
            if (resetBtn) {
                resetBtn.addEventListener('click', function () {
                    if (imagePreview) {
                        imagePreview.style.display = 'none';
                        imagePreview.src = '';
                    }
                    if (customerIdInput) {
                        customerIdInput.value = 0;
                    }
                });
            }

            async function loadCountries() {
                const countrySelect = document.getElementById('CountryId');
                if (!countrySelect) return;
                try {
                    const res = await fetch('/api/Country/GetAll?page=1&pageSize=100');
                    if (res.ok) {
                        const response = await res.json();
                        response.countries.forEach(country => {
                            const option = document.createElement('option');
                            option.value = country.countryId;
                            option.textContent = country.countryName;
                            countrySelect.appendChild(option);
                        });
                    }
                } catch (err) {
                    console.error('Failed to load countries:', err);
                }
            }

            loadCountries();
        };
    </script>
 


 